// "BatchFlipPICsHorizontally"
//
// This macro batch processes all the pic files in a folder hierarchy
//   flipping them horizontally
// Expects names to be in regular JLab format
//   or in something where all it has to do is append the
//   v01.pic v02.pic etc to the filestem

// Adapted by Greg Jefferis from code at
// http://rsb.info.nih.gov/ij/macros/BatchProcessFolders.txt

// jefferis@gmail.com

requires("1.42k"); 
file = getArgument;
dir=""
outputDir=""

//print("file = "+file);
if (file!=""){
	arg = split(file,",");
		if (arg.length!=2) {
		exit();
	} else if(arg[0]=="" || arg[1]==""){
		exit();
	} else {
		outputDir=arg[1];
		if(!endsWith(outputDir,"/")) outputDir=outputDir+"/";

		if(File.isDirectory(arg[0])) {
			// we're dealing with a directory
			dir=arg[0];
			if(!endsWith(dir,"/")) dir=dir+"/";
		} else {
			// single file
			dir=File.getParent(arg[0])+"/";
			file=File.getName(arg[0]);
			processFile(dir,outputDir,file);
			exit();
		}
	}
}	

if(dir=="") dir = getDirectory("Choose a stacks directory");
if(outputDir=="") outputDir = getDirectory("Choose output directory");

setBatchMode(true);
count = 0;
countFiles(dir);
print("Total files: "+count);
n = 0;
processFiles(dir, outputDir);

function countFiles(dir) {
	list = getFileList(dir);
	for (i=0; i<list.length; i++) {
		if (endsWith(list[i], "/"))
            countFiles(""+dir+list[i]);
	else
		count++;
	}
}

function processFiles(dir,outputDir) {
	list = getFileList(dir);
	// Stops multiple processes racing each other to do the same file
	shuffle(list);
    for (i=0; i<list.length; i++) {
        if (endsWith(list[i], "/"))
            processFiles(""+dir+list[i], outputDir+list[i]);
        else {
		showProgress(n++, count);
              processFile(dir,outputDir,list[i]);
        }
    }
}

function processFile(dir,outputDir,file) {
	lfile=toLowerCase(file);
	if (endsWith(lfile, ".pic") /*|| endsWith(lfile, ".pic.gz") */) {
		path = dir+file;
		//SAJB2-1v_01.pic
		if(!matches(file,"[A-Z]{4}[0-9]{1,3}-[1-9]{1,2}[a-z]*[_]*0[1-9]+\\.[pP][iI][cC]")){
			print("Skipping file: "+file+" since it has a non-canonical name");
			return;			
		}
		prefix=replace(file,"([A-Z]{4}[0-9]{1,3}-[1-9]{1,2}[a-z]*)[_]*0[1-9]+\\.[pP][iI][cC]","$1");
		suffix=replace(file,"[A-Z]{4}[0-9]{1,3}-[1-9]{1,2}[a-z]*([_]*0[1-9]+\\.[pP][iI][cC])","$1");
		outfile=prefix+"h"+suffix;
		outpath=outputDir+outfile;
		lockpath=outputDir+outfile+'.lock';
		if(File.exists(outpath)){
			print("Skipping file: " + file + " since " + outfile + " already exists");
			return;
		}
		if(File.exists(lockpath)){
			print("Skipping file: " + file + " since someone else is working on it");
			return;
		}
		File.saveString("",lockpath)
		print("Inpath = "+path);
		print("Outpath = "+outpath);
		print("lockpath = "+lockpath);
		run("Biorad...", "open=[" + path + "]");
		processImage();
		run("Biorad ...", "biorad=[" + outpath + "]");
		close();
		File.delete(lockpath);
	}
}

function processImage() {
	run("Flip Horizontally", "stack");
//	run("Z Project...", "projection=[Standard Deviation]");
//	run("8-bit");
//	run("Flip Vertically");
}

function shuffle(array) {
   n = array.length;  // The number of items left to shuffle (loop invariant).
   while (n > 1) {
      k = randomInt(n);     // 0 <= k < n.
      n--;                  // n is now the last pertinent index;
      temp = array[n];  // swap array[n] with array[k] (does nothing if k==n).
      array[n] = array[k];
      array[k] = temp;
   }
}

// returns a random number, 0 <= k < n
function randomInt(n) {
   return n * random();
}
