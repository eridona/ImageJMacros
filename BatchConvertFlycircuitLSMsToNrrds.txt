// "BatchConvertLSMsToPICs"
//
// This macro batch processes all the lsm files in a folder
// saving them as pic files.
// Limitations/Specifics
// 1) Only works with Fiji
// 2) Swaps channel 1 and 2
// 3) Always flips vertically 
// 4) Expects names to be in regular JLab format
//    or in something where all it has to do is append the
//    v01.pic v02.pic etc to the filestem

// (Slightly) Adapted by Greg Jefferis from code at
// http://rsb.info.nih.gov/ij/macros/BatchProcessFolders.txt

// jefferis@gmail.com

requires("1.42k"); 
file = getArgument;
dir=""
outputDir=""
outputformat="nrrd" // or pic

// 1) Check what arguments we've received 
// --------------------------------------
//print("file = "+file);
if (file!=""){
	arg = split(file,",");
	if (arg.length<2 || arg.length>4) {
		exit();
	}
	if (arg.length==3){
		outputformat=arg[2];
		if( ! (outputformat == "pic" || outputformat == "nrrd")){
			exit("Output format must be either pic or nrrd");
		}
	}
	// ... now deal with directories
	if(arg[0]=="" || arg[1]==""){
		exit();
	} else {
		outputDir=arg[1];
		if(!endsWith(outputDir,"/")) outputDir=outputDir+"/";

		if(File.isDirectory(arg[0])) {
// we're dealing with a directory
			dir=arg[0];
			if(!endsWith(dir,"/")) dir=dir+"/";
		} else {
// single file
			dir=File.getParent(arg[0])+"/";
			file=File.getName(arg[0]);
			processFile(dir,outputDir,file);
			exit();
		}
	}
}

// 2) Ask for in/output dirs if required
// --------------------------------------

if(dir=="") dir = getDirectory("Choose a stacks directory");
if(outputDir=="") outputDir = getDirectory("Choose output directory");

// 3) Process files in the chosen directories
// --------------------------------------

setBatchMode(true);
count = 0;
countFiles(dir);
print("Total files: "+count);
n = 0;
processFiles(dir, outputDir);

// 4) Function definitions
// --------------------------------------

function countFiles(dir) {
		list = getFileList(dir);
	for (i=0; i<list.length; i++) {
		if (endsWith(list[i], "/"))
            countFiles(""+dir+list[i]);
	else
		count++;
	}
}

function processFiles(dir,outputDir) {
	list = getFileList(dir);
	shuffle(list);
    for (i=0; i<list.length; i++) {
        if (endsWith(list[i], "/"))
            processFiles(""+dir+list[i], outputDir);
        else {
		showProgress(n++, count);
              processFile(dir,outputDir,list[i]);
        }
    }
}

function processFile(dir,outputDir,file) {
	if (endsWith(file, ".lsm") || endsWith(file,".LSM")) {
		// Check if output already exists
		c1outpath=outputDir+substring(file,0,lengthOf(file)-4)+"_01."+outputformat;
		if(File.exists(c1outpath)){
			print("Skipping file: " + file + " since " + c1outpath + " already exists");
			return;
		}
		path = dir+file;
		// Check if someone is already working on this
		lockpath=path+'.lock';
		if(File.exists(lockpath)){
			print("Skipping file: " + file + " since someone else is working on it");
			return;
		}
		File.saveString("",lockpath);

		imagesAlreadyOpen=nImages;
		run("Bio-Formats Importer", "open=[" + path + "] view=[Standard ImageJ] stack_order=Default split_channels");
		noImages=nImages-imagesAlreadyOpen;
		for(i=noImages;i>0;i--){
			processImage();
			if(outputformat=='pic'){
				run("Biorad ...","biorad=["+outputDir+substring(file,0,lastIndexOf(file,"."))+"_0"+i+".pic]");
			} else {
				setKeyDown("alt");
				run("Nrrd ... ", "nrrd=["+outputDir+substring(file,0,lastIndexOf(file,"."))+"_0"+i+".nrrd]");
				setKeyDown("none");
			}
			close();
		}
		File.delete(lockpath);
	}
}

function processImage() {
// run("Flip Vertically", "stack");
//	run("Z Project...", "projection=[Standard Deviation]");
//	run("8-bit");
//	run("Flip Vertically");
}

function shuffle(array) {
   n = array.length;  // The number of items left to shuffle (loop invariant).
   while (n > 1) {
      k = randomInt(n);     // 0 <= k < n.
      n--;                  // n is now the last pertinent index;
      temp = array[n];  // swap array[n] with array[k] (does nothing if k==n).
      array[n] = array[k];
      array[k] = temp;
   }
}

// returns a random number, 0 <= k < n
function randomInt(n) {
   return n * random();
}
