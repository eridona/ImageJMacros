// "BatchConvertLSMsToPICs"
//
// This macro batch processes all the lsm files in a folder
// saving them as pic files.
// Limitations/Specifics
// 1) Only works with Fiji
// 2) Channel order will be : red, green, blue (where present)
//    this is identified from lsm xml metadata 
// 3) Always flips vertically 
// 4) Expects names to be in regular JLab format
//    or in something where all it has to do is append the
//    v01.pic v02.pic etc to the filestem

// (Slightly) Adapted by Greg Jefferis from code at
// http://rsb.info.nih.gov/ij/macros/BatchProcessFolders.txt

// jefferis@gmail.com

requires("1.33s"); 
dir = getDirectory("Choose a stacks directory");
outputDir = getDirectory("Choose output directory");
setBatchMode(true);
count = 0;
countFiles(dir);
print("Total files: "+count);
n = 0;
processFiles(dir, outputDir);

function countFiles(dir) {
		list = getFileList(dir);
	for (i=0; i<list.length; i++) {
		if (endsWith(list[i], "/"))
            countFiles(""+dir+list[i]);
	else
		count++;
	}
}

function processFiles(dir,outputDir) {
	list = getFileList(dir);
    for (i=0; i<list.length; i++) {
        if (endsWith(list[i], "/"))
            processFiles(""+dir+list[i], outputDir);
        else {
		showProgress(n++, count);
              processFile(dir,outputDir,list[i]);
        }
    }
}

function processFile(dir,outputDir,file) {
	if (endsWith(file, ".lsm") || endsWith(file,".LSM")) {
		c1picpath=dir+substring(file,0,lengthOf(file)-4)+"01.pic";
		if(File.exists(c1picpath)){
			print("Skipping file: "+file+" since 01.pic already exists");
			return;			
		}

		// This is the path of the xml meta data file
		xmlpath=dir+substring(file,0,lengthOf(file)-4)+".xml";
		if(!File.exists(xmlpath)){
			print("Skipping file: "+file+" since no XML metadata available");
			return;
		}
		// parse xml file to identify channel order
		xmlstr=File.openAsString(xmlpath);
		xmllines=split(xmlstr,"\n");
		// make an array to handle up to 4 channels
		lsmchannels=newArray(5);
		channelsfound=0;
		for(l=0;l<xmllines.length;l++){
			if(indexOf(xmllines[l],"DYE_NAME")>0){
				if(indexOf(xmllines[l],"488")>0){
					lsmchannels[++channelsfound]=2;
				}
				if(indexOf(xmllines[l],"568")>0){
					lsmchannels[++channelsfound]=1;
				}
				if(indexOf(xmllines[l],"647")>0 || indexOf(xmllines[l],"633")>0){
					lsmchannels[++channelsfound]=3;
				}
			}
		}
				
		lsmpath = dir+file;
		run("Bio-Formats Importer", "open=" + lsmpath + " view=[Standard ImageJ] stack_order=Default split_channels");
		title=getTitle();
		noImages=parseInt(substring(title,(lengthOf(title)-1),lengthOf(title)));
		workingImage=getImageID();
		noImages++;
		
		// Check that we have the same number of channels from the metadata file
		// and the lsm file. 
		if( (channelsfound) != noImages){
			print("Skipping"+lsmpath+"\nNumber of channels extracted from metadata ("+channelsfound+") not equal to channels from lsm ("+noImages+")");
			// Close open images so we don't end up running out of memory
			for(i=noImages;i>0;i--){
				selectImage(workingImage);
				close();
				workingImage++;
			} 
			return;
		}
		
		for(i=noImages;i>0;i--){
			channel=lsmchannels[i];
			selectImage(workingImage);
			processImage();
			run("Biorad ...","biorad=["+outputDir+substring(file,0,lastIndexOf(file,"."))+"v_0"+channel+".pic]");
			selectImage(workingImage);
			close();
			workingImage++;
		} 
	}
}

function processImage() {
	run("Flip Vertically", "stack");
//	run("Z Project...", "projection=[Standard Deviation]");
//	run("8-bit");
//	run("Flip Vertically");
}
