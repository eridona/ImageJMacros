// This macro batch processes all the lsm files in a folder
// saving them as pic files.
// Limitations/Specifics
// 1) Only works with Fiji
// 2) Channel order will be : red, green, blue (where present)
//    this is identified from lsm xml metadata 
// 3) Always flips vertically 
// 4) Expects names to be in regular JLab format
//    or in something where all it has to do is append the
//    v01.pic v02.pic etc to the filestem
// 5) Cannot yet run headless because it uses LOCI to open LSMs
// 6) Can't yet figure out what kind of image this is
//    which might help decide whether to flip/rotate etc

// Can be passed 2 comma separated arguments on the command line
// inputPath, outputDir or inputDir, outputDir. In the later case
// it will iterate on all the files from the inputDir

// Adapted by Aaron Ostrovsky, Sebastian Cachero and
// Greg Jefferis from code at
// http://rsb.info.nih.gov/ij/macros/BatchProcessFolders.txt

requires("1.42k"); 
file = getArgument;
dir=""
outputDir=""

//print("file = "+file);
if (file!=""){
	arg = split(file,",");
		if (arg.length!=2) {
		exit();
	} else if(arg[0]=="" || arg[1]==""){
		exit();
	} else {
		outputDir=arg[1];
		if(!endsWith(outputDir,"/")) outputDir=outputDir+"/";

		if(File.isDirectory(arg[0])) {
// we're dealing with a directory
			dir=arg[0];
			if(!endsWith(dir,"/")) dir=dir+"/";
		} else {
// single file
			dir=File.getParent(arg[0])+"/";
			file=File.getName(arg[0]);
			processFile(dir,outputDir,file);
			exit();
		}
	}
}	




	if(dir=="") dir = getDirectory("Choose a stacks directory");
	if(outputDir=="") outputDir = getDirectory("Choose output directory");

	setBatchMode(true);
	count = 0;
	countFiles(dir);
	print("Total files: "+count);
	n = 0;
	processFiles(dir, outputDir);

	function countFiles(dir) {
		list = getFileList(dir);
	for (i=0; i<list.length; i++) {
		if (endsWith(list[i], "/"))
	            countFiles(""+dir+list[i]);
		else
			count++;
		}
	}


function processFiles(dir,outputDir) {
	list = getFileList(dir);
    for (i=0; i<list.length; i++) {
        if (endsWith(list[i], "/"))
            processFiles(""+dir+list[i], outputDir);
        else {
		showProgress(n++, count);
              processFile(dir,outputDir,list[i]);
        }
    }
}

function processFile(dir,outputDir,file) {
	print("dir = "+dir,"; outputDir = "+outputDir,"; file = "+file);
	if (endsWith(file, ".lsm") || endsWith(file,".LSM")) {
		c1picpath=outputDir+substring(file,0,lengthOf(file)-4)+"_01.pic";
		if(File.exists(c1picpath)){
			print("Skipping file: "+file+" since 01.pic already exists");
			return;			
		}

		// This is the path of the xml meta data file
		xmlpath=dir+substring(file,0,lengthOf(file)-4)+".xml";
		if(!File.exists(xmlpath)){
			print("Skipping file: "+file+" since no XML metadata available at "+xmlpath);
			return;
		}
		// parse xml file to identify channel order
		xmlstr=File.openAsString(xmlpath);
		xmllines=split(xmlstr,"\n");

		// get the number of channels from the xml file
		noImages=0;
		for(l=0;l<xmllines.length;l++){
			if(indexOf(xmllines[l],"IMAGES_NUMBER_CHANNELS")>0){
				noImages=parseInt(substring(xmllines[l],indexOf(xmllines[l],"\">")+2,indexOf(xmllines[l],"</")));
			} 
		}
		if( noImages==0 )
			print("Image No not found in XML data for image: "+file);


		// make an array to handle up to 4 channels
		lsmchannels=newArray(5);
		channelsfound=0;
		for(l=0;l<xmllines.length;l++){
			if(indexOf(xmllines[l],"DYE_NAME")>0){
				if(indexOf(xmllines[l],"488")>0 || indexOf(xmllines[l],"FITC")>0 || indexOf(xmllines[l],"GFP")>0){
					lsmchannels[++channelsfound]=2;
				}
				if(indexOf(xmllines[l],"568")>0 || indexOf(xmllines[l],"561")>0 || indexOf(xmllines[l],"543")>0){
					lsmchannels[++channelsfound]=1;
				}
				if(indexOf(xmllines[l],"647")>0 || indexOf(xmllines[l],"633")>0){
					lsmchannels[++channelsfound]=3;
				}
			}
		}
				
		if( (channelsfound) != noImages ){
			print("exploring ILL_NAME");
			channelsfound=0;
			for(l=0;l<xmllines.length;l++){
				if(indexOf(xmllines[l],"ILL_NAME")>0){
					if(indexOf(xmllines[l],"488")>0){
						lsmchannels[++channelsfound]=2;
					}
					if(indexOf(xmllines[l],"568")>0 || indexOf(xmllines[l],"561")>0 || indexOf(xmllines[l],"543")>0){
						lsmchannels[++channelsfound]=1;
					}
					if(indexOf(xmllines[l],"647")>0 || indexOf(xmllines[l],"633")>0){
						lsmchannels[++channelsfound]=3;
					}
				}
			
			}
		}

		lsmpath = dir+file;

		// Check that we have the same number of channels from the metadata file
		// and the lsm file. 
		if( (channelsfound) != noImages){
			print("Skipping "+lsmpath+"\nNumber of channels extracted from metadata ("+channelsfound+") not equal to channels from lsm ("+noImages+")");
			// Close open images so we don't end up running out of memory
//			for(i=noImages;i>0;i--){
//				selectImage(workingImage);
//				close();
//				workingImage++;
//			} 
			return;
		}



		run("Bio-Formats Importer", "open=" + lsmpath + " view=[Standard ImageJ] stack_order=Default split_channels");
//		title=getTitle();
//		noImages=parseInt(substring(title,(lengthOf(title)-1),lengthOf(title)));
		workingImage=getImageID();
//		noImages++;
		
		
		for(i=noImages;i>0;i--){
			channel=lsmchannels[i];
			selectImage(workingImage);
			processImage();
			run("Biorad ...","biorad=["+outputDir+substring(file,0,lastIndexOf(file,"."))+"_0"+channel+".pic]");
			selectImage(workingImage);
			close();
			workingImage++;
		} 
	}
}

function processImage() {
//	run("Rotate 90 Degrees Right");
//	run("Flip Vertically", "stack");
//	run("Z Project...", "projection=[Standard Deviation]");
//	run("8-bit");
//	run("Flip Vertically");
}
